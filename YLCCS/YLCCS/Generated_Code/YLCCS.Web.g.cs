//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.235
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace YLCCS
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    using YLCCS.Web;
    
    
    /// <summary>
    /// RIA 应用程序的上下文。
    /// </summary>
    /// <remarks>
    /// 此上下文对库进行了扩展，使得应用程序服务和类型
    /// 可供代码和 xaml 使用。
    /// </remarks>
    public sealed partial class WebContext : WebContextBase
    {
        
        #region 可扩展性方法定义

        /// <summary>
        /// 一旦初始化完成便从构造函数中调用此方法，
        /// 还可将此方法用于以后的对象设置。
        ///</summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// 初始化 WebContext 类的新实例。
        /// </summary>
        public WebContext()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// 获取向当前应用程序注册为生存期对象的上下文。
        /// </summary>
        /// 如果没有当前的应用程序，没有添加上下文或添加了多个上下文，
        /// 则会引发 <exception cref="InvalidOperationException">。
        /// </exception>
        /// <seealso cref="System.Windows.Application.ApplicationLifetimeObjects"/>
        public new static WebContext Current
        {
            get
            {
                return ((WebContext)(WebContextBase.Current));
            }
        }
        
        /// <summary>
        /// 获取表示已通过身份验证的标识的用户。
        /// </summary>
        public new User User
        {
            get
            {
                return ((User)(base.User));
            }
        }
    }
}
namespace YLCCS.Web
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.Runtime.Serialization;
    using System.ServiceModel;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    using System.ServiceModel.Web;
    using YLCCS.Web.Resources;
    
    
    /// <summary>
    /// 与“AuthenticationService”DomainService 相对应的 DomainContext。
    /// </summary>
    public sealed partial class AuthenticationContext : global::System.ServiceModel.DomainServices.Client.ApplicationServices.AuthenticationDomainContextBase
    {
        
        #region 可扩展性方法定义

        /// <summary>
        /// 一旦初始化完成便从构造函数中调用此方法，
        /// 还可将此方法用于以后的对象设置。
        ///</summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// 初始化 <see cref="AuthenticationContext"/> 类的新实例。
        /// </summary>
        public AuthenticationContext() : 
                this(new WebDomainClient<IAuthenticationServiceContract>(new Uri("YLCCS-Web-AuthenticationService.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// 用指定的服务 URI 初始化 <see cref="AuthenticationContext"/> 类的新实例。
        /// </summary>
        /// <param name="serviceUri">AuthenticationService 服务 URI。</param>
        public AuthenticationContext(Uri serviceUri) : 
                this(new WebDomainClient<IAuthenticationServiceContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// 用指定的 <paramref name="domainClient"/> 初始化 <see cref="AuthenticationContext"/> 类的新实例。
        /// </summary>
        /// <param name="domainClient">要用于此 DomainContext 的 DomainClient 实例。</param>
        public AuthenticationContext(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// 获取已加载到此 <see cref="AuthenticationContext"/> 实例中的 <see cref="User"/> 实体实例的集合。
        /// </summary>
        public EntitySet<User> Users
        {
            get
            {
                return base.EntityContainer.GetEntitySet<User>();
            }
        }
        
        /// <summary>
        /// 获取一个可使用“GetUser”查询加载 <see cref="User"/> 实体实例的 EntityQuery 实例。
        /// </summary>
        /// <returns>可以加载以检索 <see cref="User"/> 实体实例的 EntityQuery。</returns>
        public EntityQuery<User> GetUserQuery()
        {
            this.ValidateMethod("GetUserQuery", null);
            return base.CreateQuery<User>("GetUser", null, false, false);
        }
        
        /// <summary>
        /// 获取一个可使用“Login”查询加载 <see cref="User"/> 实体实例的 EntityQuery 实例。
        /// </summary>
        /// <param name="userName">查询的“userName”参数的值。</param>
        /// <param name="password">查询的“password”参数的值。</param>
        /// <param name="isPersistent">查询的“isPersistent”参数的值。</param>
        /// <param name="customData">查询的“customData”参数的值。</param>
        /// <returns>可以加载以检索 <see cref="User"/> 实体实例的 EntityQuery。</returns>
        public EntityQuery<User> LoginQuery(string userName, string password, bool isPersistent, string customData)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("userName", userName);
            parameters.Add("password", password);
            parameters.Add("isPersistent", isPersistent);
            parameters.Add("customData", customData);
            this.ValidateMethod("LoginQuery", parameters);
            return base.CreateQuery<User>("Login", parameters, true, false);
        }
        
        /// <summary>
        /// 获取一个可使用“Logout”查询加载 <see cref="User"/> 实体实例的 EntityQuery 实例。
        /// </summary>
        /// <returns>可以加载以检索 <see cref="User"/> 实体实例的 EntityQuery。</returns>
        public EntityQuery<User> LogoutQuery()
        {
            this.ValidateMethod("LogoutQuery", null);
            return base.CreateQuery<User>("Logout", null, true, false);
        }
        
        /// <summary>
        /// 为此 DomainContext 的 EntitySets 创建一个新 EntityContainer。
        /// </summary>
        /// <returns>一个新容器实例。</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new AuthenticationContextEntityContainer();
        }
        
        /// <summary>
        /// 用于“AuthenticationService”DomainService 的 Service 协定。　
        /// </summary>
        [ServiceContract()]
        public interface IAuthenticationServiceContract
        {
            
            /// <summary>
            /// 异步调用“GetUser”操作。
            /// </summary>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AuthenticationService/GetUserDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AuthenticationService/GetUser", ReplyAction="http://tempuri.org/AuthenticationService/GetUserResponse")]
            [WebGet()]
            IAsyncResult BeginGetUser(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginGetUser”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginGetUser”返回的 IAsyncResult。</param>
            /// <returns>从“GetUser”操作返回的“QueryResult”。</returns>
            QueryResult<User> EndGetUser(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“Login”操作。
            /// </summary>
            /// <param name="userName">此操作的“userName”参数的值。</param>
            /// <param name="password">此操作的“password”参数的值。</param>
            /// <param name="isPersistent">此操作的“isPersistent”参数的值。</param>
            /// <param name="customData">此操作的“customData”参数的值。</param>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AuthenticationService/LoginDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AuthenticationService/Login", ReplyAction="http://tempuri.org/AuthenticationService/LoginResponse")]
            IAsyncResult BeginLogin(string userName, string password, bool isPersistent, string customData, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginLogin”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginLogin”返回的 IAsyncResult。</param>
            /// <returns>从“Login”操作返回的“QueryResult”。</returns>
            QueryResult<User> EndLogin(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“Logout”操作。
            /// </summary>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AuthenticationService/LogoutDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AuthenticationService/Logout", ReplyAction="http://tempuri.org/AuthenticationService/LogoutResponse")]
            IAsyncResult BeginLogout(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginLogout”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginLogout”返回的 IAsyncResult。</param>
            /// <returns>从“Logout”操作返回的“QueryResult”。</returns>
            QueryResult<User> EndLogout(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“SubmitChanges”操作。
            /// </summary>
            /// <param name="changeSet">要提交的变更集。</param>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AuthenticationService/SubmitChangesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AuthenticationService/SubmitChanges", ReplyAction="http://tempuri.org/AuthenticationService/SubmitChangesResponse")]
            IAsyncResult BeginSubmitChanges(IEnumerable<ChangeSetEntry> changeSet, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginSubmitChanges”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginSubmitChanges”返回的 IAsyncResult。</param>
            /// <returns>从“SubmitChanges”返回的变更集入口元素的集合。</returns>
            IEnumerable<ChangeSetEntry> EndSubmitChanges(IAsyncResult result);
        }
        
        internal sealed class AuthenticationContextEntityContainer : EntityContainer
        {
            
            public AuthenticationContextEntityContainer()
            {
                this.CreateEntitySet<User>(EntitySetOperations.Edit);
            }
        }
    }
    
    public enum CreateUserStatus
    {
        
        Success = 0,
        
        InvalidUserName = 1,
        
        InvalidPassword = 2,
        
        InvalidQuestion = 3,
        
        InvalidAnswer = 4,
        
        InvalidEmail = 5,
        
        DuplicateUserName = 6,
        
        DuplicateEmail = 7,
        
        Failure = 8,
    }
    
    /// <summary>
    /// “RegistrationData”实体类。
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/YLCCS.Web")]
    public sealed partial class RegistrationData : Entity
    {
        
        private string _answer;
        
        private string _email;
        
        private string _friendlyName;
        
        private string _question;
        
        private string _userName;
        
        #region 可扩展性方法定义

        /// <summary>
        /// 一旦初始化完成便从构造函数中调用此方法，
        /// 还可将此方法用于以后的对象设置。
        ///</summary>
        partial void OnCreated();
        partial void OnAnswerChanging(string value);
        partial void OnAnswerChanged();
        partial void OnEmailChanging(string value);
        partial void OnEmailChanged();
        partial void OnFriendlyNameChanging(string value);
        partial void OnFriendlyNameChanged();
        partial void OnQuestionChanging(string value);
        partial void OnQuestionChanged();
        partial void OnUserNameChanging(string value);
        partial void OnUserNameChanged();

        #endregion
        
        
        /// <summary>
        /// 初始化 <see cref="RegistrationData"/> 类的新实例。
        /// </summary>
        public RegistrationData()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// 获取或设置“Answer”值。
        /// </summary>
        [DataMember()]
        [Display(Name="SecurityAnswerLabel", Order=6, ResourceType=typeof(RegistrationDataResources))]
        [Required(ErrorMessageResourceName="ValidationErrorRequiredField", ErrorMessageResourceType=typeof(ValidationErrorResources))]
        public string Answer
        {
            get
            {
                return this._answer;
            }
            set
            {
                if ((this._answer != value))
                {
                    this.OnAnswerChanging(value);
                    this.RaiseDataMemberChanging("Answer");
                    this.ValidateProperty("Answer", value);
                    this._answer = value;
                    this.RaiseDataMemberChanged("Answer");
                    this.OnAnswerChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“Email”值。
        /// </summary>
        [DataMember()]
        [Display(Name="EmailLabel", Order=2, ResourceType=typeof(RegistrationDataResources))]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RegularExpression("^([\\w-\\.]+)@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.)|(([\\w-]+\\.)+))([a-zA-Z]{2,4" +
            "}|[0-9]{1,3})(\\]?)$", ErrorMessageResourceName="ValidationErrorInvalidEmail", ErrorMessageResourceType=typeof(ValidationErrorResources))]
        [Required(ErrorMessageResourceName="ValidationErrorRequiredField", ErrorMessageResourceType=typeof(ValidationErrorResources))]
        [RoundtripOriginal()]
        public string Email
        {
            get
            {
                return this._email;
            }
            set
            {
                if ((this._email != value))
                {
                    this.OnEmailChanging(value);
                    this.ValidateProperty("Email", value);
                    this._email = value;
                    this.RaisePropertyChanged("Email");
                    this.OnEmailChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“FriendlyName”值。
        /// </summary>
        [DataMember()]
        [Display(Description="FriendlyNameDescription", Name="FriendlyNameLabel", Order=1, ResourceType=typeof(RegistrationDataResources))]
        [StringLength(255, ErrorMessageResourceName="ValidationErrorBadFriendlyNameLength", ErrorMessageResourceType=typeof(ValidationErrorResources))]
        public string FriendlyName
        {
            get
            {
                return this._friendlyName;
            }
            set
            {
                if ((this._friendlyName != value))
                {
                    this.OnFriendlyNameChanging(value);
                    this.RaiseDataMemberChanging("FriendlyName");
                    this.ValidateProperty("FriendlyName", value);
                    this._friendlyName = value;
                    this.RaiseDataMemberChanged("FriendlyName");
                    this.OnFriendlyNameChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“Question”值。
        /// </summary>
        [DataMember()]
        [Display(Name="SecurityQuestionLabel", Order=5, ResourceType=typeof(RegistrationDataResources))]
        [Required(ErrorMessageResourceName="ValidationErrorRequiredField", ErrorMessageResourceType=typeof(ValidationErrorResources))]
        public string Question
        {
            get
            {
                return this._question;
            }
            set
            {
                if ((this._question != value))
                {
                    this.OnQuestionChanging(value);
                    this.RaiseDataMemberChanging("Question");
                    this.ValidateProperty("Question", value);
                    this._question = value;
                    this.RaiseDataMemberChanged("Question");
                    this.OnQuestionChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“UserName”值。
        /// </summary>
        [DataMember()]
        [Display(Name="UserNameLabel", Order=0, ResourceType=typeof(RegistrationDataResources))]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [Required(ErrorMessageResourceName="ValidationErrorRequiredField", ErrorMessageResourceType=typeof(ValidationErrorResources))]
        [RoundtripOriginal()]
        [StringLength(255, ErrorMessageResourceName="ValidationErrorBadUserNameLength", ErrorMessageResourceType=typeof(ValidationErrorResources), MinimumLength=2)]
        public string UserName
        {
            get
            {
                return this._userName;
            }
            set
            {
                if ((this._userName != value))
                {
                    this.OnUserNameChanging(value);
                    this.ValidateProperty("UserName", value);
                    this._userName = value;
                    this.RaisePropertyChanged("UserName");
                    this.OnUserNameChanged();
                }
            }
        }
        
        /// <summary>
        /// 根据密钥字段计算可唯一标识此实体实例的值。
        /// </summary>
        /// <returns>唯一标识此实体实例的对象实例。</returns>
        public override object GetIdentity()
        {
            if (((this._email == null) 
                        || (this._userName == null)))
            {
                return null;
            }
            return EntityKey.Create(this._email, this._userName);
        }
    }
    
    /// <summary>
    /// “User”实体类。
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/YLCCS.Web")]
    public sealed partial class User : Entity, global::System.Security.Principal.IIdentity, global::System.Security.Principal.IPrincipal
    {
        
        private string _friendlyName;
        
        private string _name = string.Empty;
        
        private IEnumerable<string> _roles;
        
        #region 可扩展性方法定义

        /// <summary>
        /// 一旦初始化完成便从构造函数中调用此方法，
        /// 还可将此方法用于以后的对象设置。
        ///</summary>
        partial void OnCreated();
        partial void OnFriendlyNameChanging(string value);
        partial void OnFriendlyNameChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnRolesChanging(IEnumerable<string> value);
        partial void OnRolesChanged();

        #endregion
        
        
        /// <summary>
        /// 初始化 <see cref="User"/> 类的新实例。
        /// </summary>
        public User()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// 获取或设置“FriendlyName”值。
        /// </summary>
        [DataMember()]
        public string FriendlyName
        {
            get
            {
                return this._friendlyName;
            }
            set
            {
                if ((this._friendlyName != value))
                {
                    this.OnFriendlyNameChanging(value);
                    this.RaiseDataMemberChanging("FriendlyName");
                    this.ValidateProperty("FriendlyName", value);
                    this._friendlyName = value;
                    this.RaiseDataMemberChanged("FriendlyName");
                    this.OnFriendlyNameChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“Name”值。
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaisePropertyChanged("Name");
                    this.OnNameChanged();
                    this.RaisePropertyChanged("IsAuthenticated");
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“Roles”值。
        /// </summary>
        [DataMember()]
        [Editable(false)]
        public IEnumerable<string> Roles
        {
            get
            {
                return this._roles;
            }
            set
            {
                if ((this._roles != value))
                {
                    this.OnRolesChanging(value);
                    this.ValidateProperty("Roles", value);
                    this._roles = value;
                    this.RaisePropertyChanged("Roles");
                    this.OnRolesChanged();
                }
            }
        }
        
        string global::System.Security.Principal.IIdentity.AuthenticationType
        {
            get
            {
                return string.Empty;
            }
        }
        
        /// <summary>
        /// 获取一个值，该值指示是否已对标识进行了身份验证。
        /// </summary>
        /// <remarks>
        /// 如果 <see cref="Name"/> 不为 <c>null</c> 或空，此值为 <c>true</c>。
        /// </remarks>
        public bool IsAuthenticated
        {
            get
            {
                return (true != string.IsNullOrEmpty(this.Name));
            }
        }
        
        string global::System.Security.Principal.IIdentity.Name
        {
            get
            {
                return this.Name;
            }
        }
        
        global::System.Security.Principal.IIdentity global::System.Security.Principal.IPrincipal.Identity
        {
            get
            {
                return this;
            }
        }
        
        /// <summary>
        /// 根据密钥字段计算可唯一标识此实体实例的值。
        /// </summary>
        /// <returns>唯一标识此实体实例的对象实例。</returns>
        public override object GetIdentity()
        {
            return this._name;
        }
        
        /// <summary>
        /// 返回主体是否在角色中。
        /// </summary>
        /// <remarks>
        /// 返回角色中是否包含指定的角色。
        ///此实现区分大小写。
        /// </remarks>
        /// <param name="role">要为其检查成员资格的角色的名称。</param>
        /// <returns>主体是否在角色中。</returns>
        public bool IsInRole(string role)
        {
            if ((this.Roles == null))
            {
                return false;
            }
            return global::System.Linq.Enumerable.Contains(this.Roles, role);
        }
    }
    
    /// <summary>
    /// 与“UserRegistrationService”DomainService 相对应的 DomainContext。
    /// </summary>
    public sealed partial class UserRegistrationContext : DomainContext
    {
        
        #region 可扩展性方法定义

        /// <summary>
        /// 一旦初始化完成便从构造函数中调用此方法，
        /// 还可将此方法用于以后的对象设置。
        ///</summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// 初始化 <see cref="UserRegistrationContext"/> 类的新实例。
        /// </summary>
        public UserRegistrationContext() : 
                this(new WebDomainClient<IUserRegistrationServiceContract>(new Uri("YLCCS-Web-UserRegistrationService.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// 用指定的服务 URI 初始化 <see cref="UserRegistrationContext"/> 类的新实例。
        /// </summary>
        /// <param name="serviceUri">UserRegistrationService 服务 URI。</param>
        public UserRegistrationContext(Uri serviceUri) : 
                this(new WebDomainClient<IUserRegistrationServiceContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// 用指定的 <paramref name="domainClient"/> 初始化 <see cref="UserRegistrationContext"/> 类的新实例。
        /// </summary>
        /// <param name="domainClient">要用于此 DomainContext 的 DomainClient 实例。</param>
        public UserRegistrationContext(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// 获取已加载到此 <see cref="UserRegistrationContext"/> 实例中的 <see cref="RegistrationData"/> 实体实例的集合。
        /// </summary>
        public EntitySet<RegistrationData> RegistrationDatas
        {
            get
            {
                return base.EntityContainer.GetEntitySet<RegistrationData>();
            }
        }
        
        /// <summary>
        /// 获取一个可使用“GetUsers”查询加载 <see cref="RegistrationData"/> 实体实例的 EntityQuery 实例。
        /// </summary>
        /// <returns>可以加载以检索 <see cref="RegistrationData"/> 实体实例的 EntityQuery。</returns>
        public EntityQuery<RegistrationData> GetUsersQuery()
        {
            this.ValidateMethod("GetUsersQuery", null);
            return base.CreateQuery<RegistrationData>("GetUsers", null, false, true);
        }
        
        /// <summary>
        /// 异步调用 DomainService 的“CreateUser”方法。
        /// </summary>
        /// <param name="user">此操作的“user”参数的值。</param>
        /// <param name="password">此操作的“password”参数的值。</param>
        /// <param name="callback">要在操作完成时调用的回调。</param>
        /// <param name="userState">要传递给回调的值。该值可为 <c>null</c>。</param>
        /// <returns>可用于管理异步请求的操作实例。</returns>
        public InvokeOperation<CreateUserStatus> CreateUser(RegistrationData user, [RegularExpression("^.*[^a-zA-Z0-9].*$", ErrorMessageResourceName="ValidationErrorBadPasswordStrength", ErrorMessageResourceType=typeof(ValidationErrorResources))] [Required(ErrorMessageResourceName="ValidationErrorRequiredField", ErrorMessageResourceType=typeof(ValidationErrorResources))] [StringLength(50, ErrorMessageResourceName="ValidationErrorBadPasswordLength", ErrorMessageResourceType=typeof(ValidationErrorResources), MinimumLength=7)] string password, Action<InvokeOperation<CreateUserStatus>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("user", user);
            parameters.Add("password", password);
            this.ValidateMethod("CreateUser", parameters);
            return ((InvokeOperation<CreateUserStatus>)(this.InvokeOperation("CreateUser", typeof(CreateUserStatus), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// 异步调用 DomainService 的“CreateUser”方法。
        /// </summary>
        /// <param name="user">此操作的“user”参数的值。</param>
        /// <param name="password">此操作的“password”参数的值。</param>
        /// <returns>可用于管理异步请求的操作实例。</returns>
        public InvokeOperation<CreateUserStatus> CreateUser(RegistrationData user, [RegularExpression("^.*[^a-zA-Z0-9].*$", ErrorMessageResourceName="ValidationErrorBadPasswordStrength", ErrorMessageResourceType=typeof(ValidationErrorResources))] [Required(ErrorMessageResourceName="ValidationErrorRequiredField", ErrorMessageResourceType=typeof(ValidationErrorResources))] [StringLength(50, ErrorMessageResourceName="ValidationErrorBadPasswordLength", ErrorMessageResourceType=typeof(ValidationErrorResources), MinimumLength=7)] string password)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("user", user);
            parameters.Add("password", password);
            this.ValidateMethod("CreateUser", parameters);
            return ((InvokeOperation<CreateUserStatus>)(this.InvokeOperation("CreateUser", typeof(CreateUserStatus), parameters, true, null, null)));
        }
        
        /// <summary>
        /// 为此 DomainContext 的 EntitySets 创建一个新 EntityContainer。
        /// </summary>
        /// <returns>一个新容器实例。</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new UserRegistrationContextEntityContainer();
        }
        
        /// <summary>
        /// 用于“UserRegistrationService”DomainService 的 Service 协定。　
        /// </summary>
        [ServiceContract()]
        public interface IUserRegistrationServiceContract
        {
            
            /// <summary>
            /// 异步调用“CreateUser”操作。
            /// </summary>
            /// <param name="user">此操作的“user”参数的值。</param>
            /// <param name="password">此操作的“password”参数的值。</param>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/UserRegistrationService/CreateUserDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/UserRegistrationService/CreateUser", ReplyAction="http://tempuri.org/UserRegistrationService/CreateUserResponse")]
            IAsyncResult BeginCreateUser(RegistrationData user, string password, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginCreateUser”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginCreateUser”返回的 IAsyncResult。</param>
            /// <returns>从“CreateUser”操作返回的“CreateUserStatus”。</returns>
            CreateUserStatus EndCreateUser(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“GetUsers”操作。
            /// </summary>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/UserRegistrationService/GetUsersDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/UserRegistrationService/GetUsers", ReplyAction="http://tempuri.org/UserRegistrationService/GetUsersResponse")]
            [WebGet()]
            IAsyncResult BeginGetUsers(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginGetUsers”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginGetUsers”返回的 IAsyncResult。</param>
            /// <returns>从“GetUsers”操作返回的“QueryResult”。</returns>
            QueryResult<RegistrationData> EndGetUsers(IAsyncResult result);
        }
        
        internal sealed class UserRegistrationContextEntityContainer : EntityContainer
        {
            
            public UserRegistrationContextEntityContainer()
            {
                this.CreateEntitySet<RegistrationData>(EntitySetOperations.None);
            }
        }
    }
}
namespace YLCCS.Web.Models
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.Runtime.Serialization;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    
    
    /// <summary>
    /// “Aerobic”实体类。
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/YLCCS.Web.Models")]
    public sealed partial class Aerobic : Entity
    {
        
        private Nullable<decimal> _distance;
        
        private Nullable<int> _duration;
        
        private DateTime _exerciseDate;
        
        private Nullable<int> _heartRate;
        
        private string _project;
        
        private string _recorder;
        
        private DateTime _recordTime;
        
        private Nullable<decimal> _speed;
        
        private string _userId;
        
        #region 可扩展性方法定义

        /// <summary>
        /// 一旦初始化完成便从构造函数中调用此方法，
        /// 还可将此方法用于以后的对象设置。
        ///</summary>
        partial void OnCreated();
        partial void OnDistanceChanging(Nullable<decimal> value);
        partial void OnDistanceChanged();
        partial void OnDurationChanging(Nullable<int> value);
        partial void OnDurationChanged();
        partial void OnExerciseDateChanging(DateTime value);
        partial void OnExerciseDateChanged();
        partial void OnHeartRateChanging(Nullable<int> value);
        partial void OnHeartRateChanged();
        partial void OnProjectChanging(string value);
        partial void OnProjectChanged();
        partial void OnRecorderChanging(string value);
        partial void OnRecorderChanged();
        partial void OnRecordTimeChanging(DateTime value);
        partial void OnRecordTimeChanged();
        partial void OnSpeedChanging(Nullable<decimal> value);
        partial void OnSpeedChanged();
        partial void OnUserIdChanging(string value);
        partial void OnUserIdChanged();

        #endregion
        
        
        /// <summary>
        /// 初始化 <see cref="Aerobic"/> 类的新实例。
        /// </summary>
        public Aerobic()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// 获取或设置“Distance”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> Distance
        {
            get
            {
                return this._distance;
            }
            set
            {
                if ((this._distance != value))
                {
                    this.OnDistanceChanging(value);
                    this.RaiseDataMemberChanging("Distance");
                    this.ValidateProperty("Distance", value);
                    this._distance = value;
                    this.RaiseDataMemberChanged("Distance");
                    this.OnDistanceChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“Duration”值。
        /// </summary>
        [DataMember()]
        public Nullable<int> Duration
        {
            get
            {
                return this._duration;
            }
            set
            {
                if ((this._duration != value))
                {
                    this.OnDurationChanging(value);
                    this.RaiseDataMemberChanging("Duration");
                    this.ValidateProperty("Duration", value);
                    this._duration = value;
                    this.RaiseDataMemberChanged("Duration");
                    this.OnDurationChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“ExerciseDate”值。
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public DateTime ExerciseDate
        {
            get
            {
                return this._exerciseDate;
            }
            set
            {
                if ((this._exerciseDate != value))
                {
                    this.OnExerciseDateChanging(value);
                    this.ValidateProperty("ExerciseDate", value);
                    this._exerciseDate = value;
                    this.RaisePropertyChanged("ExerciseDate");
                    this.OnExerciseDateChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“HeartRate”值。
        /// </summary>
        [DataMember()]
        public Nullable<int> HeartRate
        {
            get
            {
                return this._heartRate;
            }
            set
            {
                if ((this._heartRate != value))
                {
                    this.OnHeartRateChanging(value);
                    this.RaiseDataMemberChanging("HeartRate");
                    this.ValidateProperty("HeartRate", value);
                    this._heartRate = value;
                    this.RaiseDataMemberChanged("HeartRate");
                    this.OnHeartRateChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“Project”值。
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [Required()]
        [RoundtripOriginal()]
        [StringLength(50)]
        public string Project
        {
            get
            {
                return this._project;
            }
            set
            {
                if ((this._project != value))
                {
                    this.OnProjectChanging(value);
                    this.ValidateProperty("Project", value);
                    this._project = value;
                    this.RaisePropertyChanged("Project");
                    this.OnProjectChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“Recorder”值。
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string Recorder
        {
            get
            {
                return this._recorder;
            }
            set
            {
                if ((this._recorder != value))
                {
                    this.OnRecorderChanging(value);
                    this.RaiseDataMemberChanging("Recorder");
                    this.ValidateProperty("Recorder", value);
                    this._recorder = value;
                    this.RaiseDataMemberChanged("Recorder");
                    this.OnRecorderChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“RecordTime”值。
        /// </summary>
        [DataMember()]
        public DateTime RecordTime
        {
            get
            {
                return this._recordTime;
            }
            set
            {
                if ((this._recordTime != value))
                {
                    this.OnRecordTimeChanging(value);
                    this.RaiseDataMemberChanging("RecordTime");
                    this.ValidateProperty("RecordTime", value);
                    this._recordTime = value;
                    this.RaiseDataMemberChanged("RecordTime");
                    this.OnRecordTimeChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“Speed”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> Speed
        {
            get
            {
                return this._speed;
            }
            set
            {
                if ((this._speed != value))
                {
                    this.OnSpeedChanging(value);
                    this.RaiseDataMemberChanging("Speed");
                    this.ValidateProperty("Speed", value);
                    this._speed = value;
                    this.RaiseDataMemberChanged("Speed");
                    this.OnSpeedChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“UserId”值。
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [Required()]
        [RoundtripOriginal()]
        [StringLength(50)]
        public string UserId
        {
            get
            {
                return this._userId;
            }
            set
            {
                if ((this._userId != value))
                {
                    this.OnUserIdChanging(value);
                    this.ValidateProperty("UserId", value);
                    this._userId = value;
                    this.RaisePropertyChanged("UserId");
                    this.OnUserIdChanged();
                }
            }
        }
        
        /// <summary>
        /// 根据密钥字段计算可唯一标识此实体实例的值。
        /// </summary>
        /// <returns>唯一标识此实体实例的对象实例。</returns>
        public override object GetIdentity()
        {
            if (((this._project == null) 
                        || (this._userId == null)))
            {
                return null;
            }
            return EntityKey.Create(this._exerciseDate, this._project, this._userId);
        }
    }
    
    /// <summary>
    /// “BasicData”实体类。
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/YLCCS.Web.Models")]
    public sealed partial class BasicData : Entity
    {
        
        private Nullable<decimal> _bloodPressureH;
        
        private Nullable<decimal> _bloodPressureL;
        
        private DateTime _exerciseDate;
        
        private string _recorder;
        
        private DateTime _recordTime;
        
        private string _userId;
        
        private Nullable<decimal> _weight;
        
        #region 可扩展性方法定义

        /// <summary>
        /// 一旦初始化完成便从构造函数中调用此方法，
        /// 还可将此方法用于以后的对象设置。
        ///</summary>
        partial void OnCreated();
        partial void OnBloodPressureHChanging(Nullable<decimal> value);
        partial void OnBloodPressureHChanged();
        partial void OnBloodPressureLChanging(Nullable<decimal> value);
        partial void OnBloodPressureLChanged();
        partial void OnExerciseDateChanging(DateTime value);
        partial void OnExerciseDateChanged();
        partial void OnRecorderChanging(string value);
        partial void OnRecorderChanged();
        partial void OnRecordTimeChanging(DateTime value);
        partial void OnRecordTimeChanged();
        partial void OnUserIdChanging(string value);
        partial void OnUserIdChanged();
        partial void OnWeightChanging(Nullable<decimal> value);
        partial void OnWeightChanged();

        #endregion
        
        
        /// <summary>
        /// 初始化 <see cref="BasicData"/> 类的新实例。
        /// </summary>
        public BasicData()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// 获取或设置“BloodPressureH”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> BloodPressureH
        {
            get
            {
                return this._bloodPressureH;
            }
            set
            {
                if ((this._bloodPressureH != value))
                {
                    this.OnBloodPressureHChanging(value);
                    this.RaiseDataMemberChanging("BloodPressureH");
                    this.ValidateProperty("BloodPressureH", value);
                    this._bloodPressureH = value;
                    this.RaiseDataMemberChanged("BloodPressureH");
                    this.OnBloodPressureHChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“BloodPressureL”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> BloodPressureL
        {
            get
            {
                return this._bloodPressureL;
            }
            set
            {
                if ((this._bloodPressureL != value))
                {
                    this.OnBloodPressureLChanging(value);
                    this.RaiseDataMemberChanging("BloodPressureL");
                    this.ValidateProperty("BloodPressureL", value);
                    this._bloodPressureL = value;
                    this.RaiseDataMemberChanged("BloodPressureL");
                    this.OnBloodPressureLChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“ExerciseDate”值。
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public DateTime ExerciseDate
        {
            get
            {
                return this._exerciseDate;
            }
            set
            {
                if ((this._exerciseDate != value))
                {
                    this.OnExerciseDateChanging(value);
                    this.ValidateProperty("ExerciseDate", value);
                    this._exerciseDate = value;
                    this.RaisePropertyChanged("ExerciseDate");
                    this.OnExerciseDateChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“Recorder”值。
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string Recorder
        {
            get
            {
                return this._recorder;
            }
            set
            {
                if ((this._recorder != value))
                {
                    this.OnRecorderChanging(value);
                    this.RaiseDataMemberChanging("Recorder");
                    this.ValidateProperty("Recorder", value);
                    this._recorder = value;
                    this.RaiseDataMemberChanged("Recorder");
                    this.OnRecorderChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“RecordTime”值。
        /// </summary>
        [DataMember()]
        public DateTime RecordTime
        {
            get
            {
                return this._recordTime;
            }
            set
            {
                if ((this._recordTime != value))
                {
                    this.OnRecordTimeChanging(value);
                    this.RaiseDataMemberChanging("RecordTime");
                    this.ValidateProperty("RecordTime", value);
                    this._recordTime = value;
                    this.RaiseDataMemberChanged("RecordTime");
                    this.OnRecordTimeChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“UserId”值。
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [Required()]
        [RoundtripOriginal()]
        [StringLength(50)]
        public string UserId
        {
            get
            {
                return this._userId;
            }
            set
            {
                if ((this._userId != value))
                {
                    this.OnUserIdChanging(value);
                    this.ValidateProperty("UserId", value);
                    this._userId = value;
                    this.RaisePropertyChanged("UserId");
                    this.OnUserIdChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“Weight”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> Weight
        {
            get
            {
                return this._weight;
            }
            set
            {
                if ((this._weight != value))
                {
                    this.OnWeightChanging(value);
                    this.RaiseDataMemberChanging("Weight");
                    this.ValidateProperty("Weight", value);
                    this._weight = value;
                    this.RaiseDataMemberChanged("Weight");
                    this.OnWeightChanged();
                }
            }
        }
        
        /// <summary>
        /// 根据密钥字段计算可唯一标识此实体实例的值。
        /// </summary>
        /// <returns>唯一标识此实体实例的对象实例。</returns>
        public override object GetIdentity()
        {
            if ((this._userId == null))
            {
                return null;
            }
            return EntityKey.Create(this._exerciseDate, this._userId);
        }
    }
    
    /// <summary>
    /// “Strength”实体类。
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/YLCCS.Web.Models")]
    public sealed partial class Strength : Entity
    {
        
        private DateTime _exerciseDate;
        
        private Nullable<int> _groups;
        
        private string _project;
        
        private string _recorder;
        
        private DateTime _recordTime;
        
        private Nullable<int> _times;
        
        private string _userId;
        
        private Nullable<decimal> _weight;
        
        #region 可扩展性方法定义

        /// <summary>
        /// 一旦初始化完成便从构造函数中调用此方法，
        /// 还可将此方法用于以后的对象设置。
        ///</summary>
        partial void OnCreated();
        partial void OnExerciseDateChanging(DateTime value);
        partial void OnExerciseDateChanged();
        partial void OnGroupsChanging(Nullable<int> value);
        partial void OnGroupsChanged();
        partial void OnProjectChanging(string value);
        partial void OnProjectChanged();
        partial void OnRecorderChanging(string value);
        partial void OnRecorderChanged();
        partial void OnRecordTimeChanging(DateTime value);
        partial void OnRecordTimeChanged();
        partial void OnTimesChanging(Nullable<int> value);
        partial void OnTimesChanged();
        partial void OnUserIdChanging(string value);
        partial void OnUserIdChanged();
        partial void OnWeightChanging(Nullable<decimal> value);
        partial void OnWeightChanged();

        #endregion
        
        
        /// <summary>
        /// 初始化 <see cref="Strength"/> 类的新实例。
        /// </summary>
        public Strength()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// 获取或设置“ExerciseDate”值。
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public DateTime ExerciseDate
        {
            get
            {
                return this._exerciseDate;
            }
            set
            {
                if ((this._exerciseDate != value))
                {
                    this.OnExerciseDateChanging(value);
                    this.ValidateProperty("ExerciseDate", value);
                    this._exerciseDate = value;
                    this.RaisePropertyChanged("ExerciseDate");
                    this.OnExerciseDateChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“Groups”值。
        /// </summary>
        [DataMember()]
        public Nullable<int> Groups
        {
            get
            {
                return this._groups;
            }
            set
            {
                if ((this._groups != value))
                {
                    this.OnGroupsChanging(value);
                    this.RaiseDataMemberChanging("Groups");
                    this.ValidateProperty("Groups", value);
                    this._groups = value;
                    this.RaiseDataMemberChanged("Groups");
                    this.OnGroupsChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“Project”值。
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [Required()]
        [RoundtripOriginal()]
        [StringLength(50)]
        public string Project
        {
            get
            {
                return this._project;
            }
            set
            {
                if ((this._project != value))
                {
                    this.OnProjectChanging(value);
                    this.ValidateProperty("Project", value);
                    this._project = value;
                    this.RaisePropertyChanged("Project");
                    this.OnProjectChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“Recorder”值。
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string Recorder
        {
            get
            {
                return this._recorder;
            }
            set
            {
                if ((this._recorder != value))
                {
                    this.OnRecorderChanging(value);
                    this.RaiseDataMemberChanging("Recorder");
                    this.ValidateProperty("Recorder", value);
                    this._recorder = value;
                    this.RaiseDataMemberChanged("Recorder");
                    this.OnRecorderChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“RecordTime”值。
        /// </summary>
        [DataMember()]
        public DateTime RecordTime
        {
            get
            {
                return this._recordTime;
            }
            set
            {
                if ((this._recordTime != value))
                {
                    this.OnRecordTimeChanging(value);
                    this.RaiseDataMemberChanging("RecordTime");
                    this.ValidateProperty("RecordTime", value);
                    this._recordTime = value;
                    this.RaiseDataMemberChanged("RecordTime");
                    this.OnRecordTimeChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“Times”值。
        /// </summary>
        [DataMember()]
        public Nullable<int> Times
        {
            get
            {
                return this._times;
            }
            set
            {
                if ((this._times != value))
                {
                    this.OnTimesChanging(value);
                    this.RaiseDataMemberChanging("Times");
                    this.ValidateProperty("Times", value);
                    this._times = value;
                    this.RaiseDataMemberChanged("Times");
                    this.OnTimesChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“UserId”值。
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [Required()]
        [RoundtripOriginal()]
        [StringLength(50)]
        public string UserId
        {
            get
            {
                return this._userId;
            }
            set
            {
                if ((this._userId != value))
                {
                    this.OnUserIdChanging(value);
                    this.ValidateProperty("UserId", value);
                    this._userId = value;
                    this.RaisePropertyChanged("UserId");
                    this.OnUserIdChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“Weight”值。
        /// </summary>
        [DataMember()]
        public Nullable<decimal> Weight
        {
            get
            {
                return this._weight;
            }
            set
            {
                if ((this._weight != value))
                {
                    this.OnWeightChanging(value);
                    this.RaiseDataMemberChanging("Weight");
                    this.ValidateProperty("Weight", value);
                    this._weight = value;
                    this.RaiseDataMemberChanged("Weight");
                    this.OnWeightChanged();
                }
            }
        }
        
        /// <summary>
        /// 根据密钥字段计算可唯一标识此实体实例的值。
        /// </summary>
        /// <returns>唯一标识此实体实例的对象实例。</returns>
        public override object GetIdentity()
        {
            if (((this._project == null) 
                        || (this._userId == null)))
            {
                return null;
            }
            return EntityKey.Create(this._exerciseDate, this._project, this._userId);
        }
    }
}
namespace YLCCS.Web.Services
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.ServiceModel;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    using System.ServiceModel.Web;
    using YLCCS.Web.Models;
    
    
    /// <summary>
    /// 与“LMDataService”DomainService 相对应的 DomainContext。
    /// </summary>
    public sealed partial class LMDataContext : DomainContext
    {
        
        #region 可扩展性方法定义

        /// <summary>
        /// 一旦初始化完成便从构造函数中调用此方法，
        /// 还可将此方法用于以后的对象设置。
        ///</summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// 初始化 <see cref="LMDataContext"/> 类的新实例。
        /// </summary>
        public LMDataContext() : 
                this(new WebDomainClient<ILMDataServiceContract>(new Uri("YLCCS-Web-Services-LMDataService.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// 用指定的服务 URI 初始化 <see cref="LMDataContext"/> 类的新实例。
        /// </summary>
        /// <param name="serviceUri">LMDataService 服务 URI。</param>
        public LMDataContext(Uri serviceUri) : 
                this(new WebDomainClient<ILMDataServiceContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// 用指定的 <paramref name="domainClient"/> 初始化 <see cref="LMDataContext"/> 类的新实例。
        /// </summary>
        /// <param name="domainClient">要用于此 DomainContext 的 DomainClient 实例。</param>
        public LMDataContext(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// 获取已加载到此 <see cref="LMDataContext"/> 实例中的 <see cref="Aerobic"/> 实体实例的集合。
        /// </summary>
        public EntitySet<Aerobic> Aerobics
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Aerobic>();
            }
        }
        
        /// <summary>
        /// 获取已加载到此 <see cref="LMDataContext"/> 实例中的 <see cref="BasicData"/> 实体实例的集合。
        /// </summary>
        public EntitySet<BasicData> BasicDatas
        {
            get
            {
                return base.EntityContainer.GetEntitySet<BasicData>();
            }
        }
        
        /// <summary>
        /// 获取已加载到此 <see cref="LMDataContext"/> 实例中的 <see cref="Strength"/> 实体实例的集合。
        /// </summary>
        public EntitySet<Strength> Strengths
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Strength>();
            }
        }
        
        /// <summary>
        /// 获取一个可使用“GetAerobic”查询加载 <see cref="Aerobic"/> 实体实例的 EntityQuery 实例。
        /// </summary>
        /// <returns>可以加载以检索 <see cref="Aerobic"/> 实体实例的 EntityQuery。</returns>
        public EntityQuery<Aerobic> GetAerobicQuery()
        {
            this.ValidateMethod("GetAerobicQuery", null);
            return base.CreateQuery<Aerobic>("GetAerobic", null, false, true);
        }
        
        /// <summary>
        /// 获取一个可使用“GetBasicData”查询加载 <see cref="BasicData"/> 实体实例的 EntityQuery 实例。
        /// </summary>
        /// <returns>可以加载以检索 <see cref="BasicData"/> 实体实例的 EntityQuery。</returns>
        public EntityQuery<BasicData> GetBasicDataQuery()
        {
            this.ValidateMethod("GetBasicDataQuery", null);
            return base.CreateQuery<BasicData>("GetBasicData", null, false, true);
        }
        
        /// <summary>
        /// 获取一个可使用“GetStrength”查询加载 <see cref="Strength"/> 实体实例的 EntityQuery 实例。
        /// </summary>
        /// <returns>可以加载以检索 <see cref="Strength"/> 实体实例的 EntityQuery。</returns>
        public EntityQuery<Strength> GetStrengthQuery()
        {
            this.ValidateMethod("GetStrengthQuery", null);
            return base.CreateQuery<Strength>("GetStrength", null, false, true);
        }
        
        /// <summary>
        /// 为此 DomainContext 的 EntitySets 创建一个新 EntityContainer。
        /// </summary>
        /// <returns>一个新容器实例。</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new LMDataContextEntityContainer();
        }
        
        /// <summary>
        /// 用于“LMDataService”DomainService 的 Service 协定。　
        /// </summary>
        [ServiceContract()]
        public interface ILMDataServiceContract
        {
            
            /// <summary>
            /// 异步调用“GetAerobic”操作。
            /// </summary>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/LMDataService/GetAerobicDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/LMDataService/GetAerobic", ReplyAction="http://tempuri.org/LMDataService/GetAerobicResponse")]
            [WebGet()]
            IAsyncResult BeginGetAerobic(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginGetAerobic”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginGetAerobic”返回的 IAsyncResult。</param>
            /// <returns>从“GetAerobic”操作返回的“QueryResult”。</returns>
            QueryResult<Aerobic> EndGetAerobic(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“GetBasicData”操作。
            /// </summary>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/LMDataService/GetBasicDataDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/LMDataService/GetBasicData", ReplyAction="http://tempuri.org/LMDataService/GetBasicDataResponse")]
            [WebGet()]
            IAsyncResult BeginGetBasicData(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginGetBasicData”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginGetBasicData”返回的 IAsyncResult。</param>
            /// <returns>从“GetBasicData”操作返回的“QueryResult”。</returns>
            QueryResult<BasicData> EndGetBasicData(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“GetStrength”操作。
            /// </summary>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/LMDataService/GetStrengthDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/LMDataService/GetStrength", ReplyAction="http://tempuri.org/LMDataService/GetStrengthResponse")]
            [WebGet()]
            IAsyncResult BeginGetStrength(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginGetStrength”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginGetStrength”返回的 IAsyncResult。</param>
            /// <returns>从“GetStrength”操作返回的“QueryResult”。</returns>
            QueryResult<Strength> EndGetStrength(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“SubmitChanges”操作。
            /// </summary>
            /// <param name="changeSet">要提交的变更集。</param>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/LMDataService/SubmitChangesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/LMDataService/SubmitChanges", ReplyAction="http://tempuri.org/LMDataService/SubmitChangesResponse")]
            IAsyncResult BeginSubmitChanges(IEnumerable<ChangeSetEntry> changeSet, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginSubmitChanges”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginSubmitChanges”返回的 IAsyncResult。</param>
            /// <returns>从“SubmitChanges”返回的变更集入口元素的集合。</returns>
            IEnumerable<ChangeSetEntry> EndSubmitChanges(IAsyncResult result);
        }
        
        internal sealed class LMDataContextEntityContainer : EntityContainer
        {
            
            public LMDataContextEntityContainer()
            {
                this.CreateEntitySet<Aerobic>(EntitySetOperations.All);
                this.CreateEntitySet<BasicData>(EntitySetOperations.All);
                this.CreateEntitySet<Strength>(EntitySetOperations.All);
            }
        }
    }
}
